### **What are HTTP Status Codes in Node.js?**  
HTTP status codes are standard response codes given by web servers when a client (like a browser or an API) makes a request. These codes indicate whether the request was successful, failed, or requires further action.

---

## **Commonly Used HTTP Status Codes in Node.js**

### **1. 200 OK (Success)**
ðŸ“Œ **Meaning**: The request was successful, and the server is returning the requested data.  
ðŸ“Œ **Example**:
```js
const http = require('http');

const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Success! Data received.');
});

server.listen(3000, () => console.log('Server running on port 3000'));
```

---

### **2. 201 Created**
ðŸ“Œ **Meaning**: The request was successful, and a new resource was created.  
ðŸ“Œ **Example** (Express.js):
```js
const express = require('express');
const app = express();

app.post('/create-user', (req, res) => {
    res.status(201).json({ message: 'User created successfully' });
});

app.listen(3000, () => console.log('Server running on port 3000'));
```

---

### **3. 400 Bad Request**
ðŸ“Œ **Meaning**: The request was incorrect or missing required data.  
ðŸ“Œ **Example**:
```js
app.post('/login', (req, res) => {
    if (!req.body.username || !req.body.password) {
        return res.status(400).json({ error: 'Missing username or password' });
    }
    res.send('Login successful');
});
```

---

### **4. 401 Unauthorized**
ðŸ“Œ **Meaning**: The request lacks valid authentication credentials.  
ðŸ“Œ **Example**:
```js
app.get('/dashboard', (req, res) => {
    if (!req.headers.authorization) {
        return res.status(401).json({ error: 'Unauthorized access' });
    }
    res.send('Welcome to Dashboard');
});
```

---

### **5. 403 Forbidden**
ðŸ“Œ **Meaning**: The user is authenticated but does not have permission to access the resource.  
ðŸ“Œ **Example**:
```js
app.get('/admin', (req, res) => {
    const isAdmin = false; // Example role check
    if (!isAdmin) {
        return res.status(403).json({ error: 'Access denied' });
    }
    res.send('Welcome Admin');
});
```

---

### **6. 404 Not Found**
ðŸ“Œ **Meaning**: The requested resource does not exist on the server.  
ðŸ“Œ **Example**:
```js
app.use((req, res) => {
    res.status(404).json({ error: 'Page not found' });
});
```

---

### **7. 500 Internal Server Error**
ðŸ“Œ **Meaning**: Something went wrong on the server.  
ðŸ“Œ **Example**:
```js
app.get('/error', (req, res) => {
    throw new Error('Something went wrong!');
});

app.use((err, req, res, next) => {
    res.status(500).json({ error: 'Internal Server Error' });
});
```

---

## **Conclusion**  
HTTP status codes help communicate whether a request was successful or encountered issues. In Node.js, these codes are commonly used with frameworks like Express.js to handle API responses properly. ðŸš€

Sure! HTTP status codes are numbers that tell us whether a request was successful or not. Think of them like responses from a server telling you what happened when you asked for something. Hereâ€™s a simple breakdown:

### **1xx - Informational**  
These are just updates saying, "Hey, I'm working on it!"  
- **100 Continue** â€“ The server got your request, keep going.  
- **101 Switching Protocols** â€“ Changing how the connection works.  

### **2xx - Success**  
Everything went well!  
- **200 OK** â€“ The request worked fine.  
- **201 Created** â€“ Something new was successfully made (like a new user).  
- **204 No Content** â€“ The request was successful, but there's no data to send back.  

### **3xx - Redirection**  
The requested content moved somewhere else.  
- **301 Moved Permanently** â€“ The URL changed forever.  
- **302 Found** â€“ Temporarily moved; try again later.  

### **4xx - Client Errors**  
Something went wrong because of the request.  
- **400 Bad Request** â€“ The request doesnâ€™t make sense.  
- **401 Unauthorized** â€“ You need to log in first!  
- **403 Forbidden** â€“ You donâ€™t have permission.  
- **404 Not Found** â€“ The requested page isnâ€™t there.  

### **5xx - Server Errors**  
The problem is on the serverâ€™s side.  
- **500 Internal Server Error** â€“ Something broke on the server!  
- **502 Bad Gateway** â€“ The server didnâ€™t get a good response from another server.  
- **503 Service Unavailable** â€“ The server is too busy or down.  

I hope this makes it easier! Want a practical example using Node.js? ðŸš€
