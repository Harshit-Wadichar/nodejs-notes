Let’s explain the differences between `createConnection`, `createPool`, and `createPoolCluster` in MySQL for Node.js with simple examples.

---

### **1. `createConnection` (Single Connection)**
- **What it does**: Creates a **single connection** to the database.  
- **Use case**: Good for simple scripts or one-off tasks (e.g., running a single query).  
- **Drawback**: Not suitable for web apps with multiple users (it can’t handle concurrent requests efficiently).

#### Example:
```javascript
const mysql = require('mysql2');

// Create a single connection
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'your_password',
  database: 'mydb'
});

// Connect
connection.connect((err) => {
  if (err) throw err;
  console.log('Connected!');
});

// Query the database
connection.query('SELECT * FROM users', (err, results) => {
  if (err) throw err;
  console.log(results);
});

// Close the connection when done
connection.end();
```

---

### **2. `createPool` (Connection Pool)**  
- **What it does**: Creates a **pool of reusable connections**.  
- **Use case**: Ideal for web apps (like your login page) where multiple users need to access the database simultaneously.  
- **Advantage**: Faster and more efficient because it recycles connections instead of creating new ones every time.

#### Example:
```javascript
const mysql = require('mysql2');

// Create a connection pool
const pool = mysql.createPool({
  host: 'localhost',
  user: 'root',
  password: 'your_password',
  database: 'mydb',
  waitForConnections: true,
  connectionLimit: 10, // Max number of connections in the pool
  queueLimit: 0 // Unlimited queued requests
});

// Use the pool for queries
pool.query('SELECT * FROM users', (err, results) => {
  if (err) throw err;
  console.log(results);
});

// Get a connection from the pool (for more control)
pool.getConnection((err, connection) => {
  if (err) throw err;
  connection.query('SELECT * FROM users', (err, results) => {
    connection.release(); // Release the connection back to the pool
    if (err) throw err;
    console.log(results);
  });
});
```

---

### **3. `createPoolCluster` (Advanced Pooling)**  
- **What it does**: Manages **multiple connection pools** (e.g., for read/write splitting or multi-database setups).  
- **Use case**: Complex apps where you need to distribute queries across multiple databases or servers.

#### Example:
```javascript
const mysql = require('mysql2');

// Create a cluster
const cluster = mysql.createPoolCluster();

// Add database configurations to the cluster
cluster.add('MASTER', { host: 'localhost', user: 'root', password: 'pass', database: 'mydb' });
cluster.add('SLAVE1', { host: 'slave1.example.com', user: 'root', password: 'pass', database: 'mydb' });

// Query from a specific pool in the cluster
cluster.getConnection('SLAVE1', (err, connection) => {
  if (err) throw err;
  connection.query('SELECT * FROM users', (err, results) => {
    connection.release();
    if (err) throw err;
    console.log(results);
  });
});
```

---

### **Key Differences**  
| **Method**          | **Use Case**                          | **Performance** | **Concurrency** |
|----------------------|---------------------------------------|------------------|------------------|
| `createConnection`   | Single-task scripts                   | Slow for many users | ❌ No            |
| `createPool`         | Web apps (multiple users)            | ✅ Fast & scalable | ✅ Yes           |
| `createPoolCluster`  | Multi-database or read/write setups   | ✅ Best for complex apps | ✅ Yes           |

---

### **When to Use Which?**  
1. **Simple Script**: Use `createConnection`.  
2. **Web App (Login Page)**: Use `createPool` (this is what you’ll use 90% of the time).  
3. **High Availability/Complex Setup**: Use `createPoolCluster`.

---

### **Key Takeaways**  
- Always use `createPool` for web apps (like your login page) to handle multiple users.  
- Close single connections (`connection.end()`) when done.  
- Pools automatically manage connections—no need to manually release them if you use `pool.query()`.  
- Use `pool.getConnection()` for transactions or advanced control.  

Example for your login page (using **pool**):
```javascript
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Use the connection pool
  pool.query(
    'SELECT * FROM users WHERE username = ? AND password = ?',
    [username, password],
    (err, results) => {
      if (err) throw err;
      if (results.length > 0) res.send('Login success!');
      else res.send('Invalid credentials!');
    }
  );
});
```