In Node.js, middleware refers to functions that execute during the lifecycle of a request to the server. They can modify the request object (`req`), the response object (`res`), or end the request-response cycle. Middleware is commonly used in Express.js, a popular Node.js framework, to handle tasks like logging, authentication, error handling, or parsing request bodies.

Here's an example to clarify:

```javascript
const express = require('express');
const app = express();

// Middleware function to log request details
const loggerMiddleware = (req, res, next) => {
  console.log(`${req.method} request for ${req.url}`);
  next(); // Pass control to the next middleware or route handler
};

// Apply the middleware to all routes
app.use(loggerMiddleware);

app.get('/', (req, res) => {
  res.send('Hello, Middleware!');
});

app.get('/about', (req, res) => {
  res.send('About Middleware');
});

// Start the server
app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});
```

### Explanation:
1. **`loggerMiddleware`**: This function logs the HTTP method and URL of incoming requests.
2. **`app.use(loggerMiddleware)`**: This applies the middleware globally to all routes.
3. **Flow**: When a request comes in, the middleware executes. After completing its task (logging in this case), it calls `next()`, which allows the request to move to the next middleware or route handler.

You can chain multiple middleware functions, and they are executed in the order they are defined. Middleware makes it easier to handle pre-processing tasks systematically!